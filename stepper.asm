.origin 0
.entrypoint START

#define CONST_PRUCFG C4

#define GPIO0   0x44E07000
#define GPIO1	0x4804C000 
#define GPIO2	0x481AC000 

#define GPIO_DATAIN		0x138
#define GPIO_CLEARDATAOUT	0x190
#define GPIO_SETDATAOUT		0x194

#define CONST_PRUDRAM C24
#define CTBIR_1 0x22024

#define FUNCTION_TIME	280
#define LOOP_TIME	606

#define MOTOR_STEP	52
#define MOTOR_DIR	100
#define CONTROL_VALVE	148
#define HOME_SWITCH	172
#define TIME_STEP	220
#define MOTOR_TIME	268
#define STEP_POSITION	316

.macro WRITERAM
.mparam addr, reg, value
        MOV reg, value
        SBCO reg, CONST_PRUDRAM, addr, 4
        ADD addr, addr, 4
.endm

.macro READRAM
.mparam addr, offset, reg, out
        MOV reg, addr
	ADD reg, reg, offset
        LBCO out, CONST_PRUDRAM, reg, 4
.endm

.macro WAIT
.mparam reg, clicks
	MOV reg, clicks
LOOP1:
	SUB reg, reg, 1
	QBNE LOOP1, reg, 0
.endm

.macro TIMEADD
.mparam reg1, reg2, time
	MOV reg1, 268
LOOP1:
        LBCO reg2, CONST_PRUDRAM, reg1, 4 //Motor Time
	ADD reg2, reg2, time
        SBCO reg2, CONST_PRUDRAM, reg1, 4 //Motor Time
	ADD reg1, reg1, 4
	MOV reg2, 316
	QBNE LOOP1, reg1, reg2
.endm

START:
	//Enables OCP (Open Core Protocol) between PRU and am33xx
	LBCO r0, CONST_PRUCFG, 4, 4
	CLR r0, r0, 4
	SBCO r0, CONST_PRUCFG, 4, 4

	//Configure the block index register
	MOV r0, 0x00000000
	MOV r1, CTBIR_1
	SBBO r0, r1, #0x00, 4

	//Load GPIO/PRU addresses into RAM
        MOV r0, MOTOR_STEP
	//Motor STEP
	WRITERAM r0, r1, 0b00000000000001
	WRITERAM r0, r1, 0b00000000000010
	WRITERAM r0, r1, 0b00000000000100
	WRITERAM r0, r1, 0b00000000001000
	WRITERAM r0, r1, 0b00000000010000
	WRITERAM r0, r1, 0b00000000100000
	WRITERAM r0, r1, 0b00000001000000
	WRITERAM r0, r1, 0b00000010000000
	WRITERAM r0, r1, 0b00000100000000
	WRITERAM r0, r1, 0b00001000000000
	WRITERAM r0, r1, 0b00100000000000
	WRITERAM r0, r1, 0b01000000000000
	//Motor DIR
	WRITERAM r0, r1, 0b0000000000000001
	WRITERAM r0, r1, 0b0000000000000010
	WRITERAM r0, r1, 0b0000000000000100
	WRITERAM r0, r1, 0b0000000000001000
	WRITERAM r0, r1, 0b0000000000010000
	WRITERAM r0, r1, 0b0000000000100000
	WRITERAM r0, r1, 0b0000000001000000
	WRITERAM r0, r1, 0b0000000010000000
	WRITERAM r0, r1, 0b0001000000000000
	WRITERAM r0, r1, 0b0010000000000000
	WRITERAM r0, r1, 0b0100000000000000
	WRITERAM r0, r1, 0b1000000000000000
	//Control Valve
	WRITERAM r0, r1, 0b000000000000010
	WRITERAM r0, r1, 0b000000000000100
	WRITERAM r0, r1, 0b000000000001000
	WRITERAM r0, r1, 0b000000000010000
	WRITERAM r0, r1, 0b000000000100000
	WRITERAM r0, r1, 0b100000000000000
	//Home Switch
	WRITERAM r0, r1, 0b000000000000000000000100000000
	WRITERAM r0, r1, 0b000000000000000000001000000000
	WRITERAM r0, r1, 0b000000000000000000010000000000
	WRITERAM r0, r1, 0b000000000000000000100000000000
	WRITERAM r0, r1, 0b000000010000000000000000000000
	WRITERAM r0, r1, 0b000000100000000000000000000000
	WRITERAM r0, r1, 0b000000000000010000000000000000
	WRITERAM r0, r1, 0b000000000000100000000000000000
	WRITERAM r0, r1, 0b000000000001000000000000000000
	WRITERAM r0, r1, 0b000000000010000000000000000000
	WRITERAM r0, r1, 0b010000000000000000000000000000
	WRITERAM r0, r1, 0b100000000000000000000000000000

	//Initialize variables
	//Time Step
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	WRITERAM r0, r1, 1000000
	//Motor Time
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	//Step Position
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0
	WRITERAM r0, r1, 0

	//This loop goes through all 12 motors and steps them asynchronously
LOOP1:
	MOV r0, 0 //Index
LOOP2:
	//Check if it's time to step the motor
	READRAM TIME_STEP, r0, r1, r2
	READRAM MOTOR_TIME, r0, r1, r3
	QBLT NXTMOT, r2, r3
	SUB r3, r3, r2
	SBCO r3, CONST_PRUDRAM, r1, 4 //Motor Time

	//Check if the motor needs to be stepped
	READRAM 0, r0, r1, r2
	READRAM STEP_POSITION, r0, r1, r3
        QBEQ NXTMOT, r2, r3

	//Set the direction of the motor
        QBLT DIRDOWN, r3, r2
        MOV r2, GPIO1 | GPIO_CLEARDATAOUT
        ADD r3, r3, 1
        JMP DIRUP
DIRDOWN:
        MOV r2, GPIO1 | GPIO_SETDATAOUT
        SUB r3, r3, 1
DIRUP:
        SBCO r3, CONST_PRUDRAM, r1, 4 //Step Position
	READRAM MOTOR_DIR, r0, r3, r1
        SBBO r1, r2, 0, 4

	//Step the motor
	READRAM MOTOR_STEP, r0, r1, r2
	XOR r30, r30, r2

	//Add the time spent stepping the motor
	MOV r3, FUNCTION_TIME
	TIMEADD r1, r2, r3

NXTMOT:
	//Add the time spent in this loop
	MOV r3, LOOP_TIME
	TIMEADD r1, r2, r3

	//Increment in index and move onto the next motor
	ADD r0, r0, 4
	QBNE LOOP2, r0, 48

	JMP LOOP1

HALT

